require "rake-pipeline-web-filters"
require 'rake-pipeline-web-filters/filter_with_dependencies'
require "json"
require "less"
require "execjs"
require "uglifier"


class AddMicroLoader < Rake::Pipeline::Filter
  LOADER = File.expand_path("../app/submodules/ember.js/packages/loader/lib/main.js", __FILE__)

  def initialize(options={}, &block)
    super(&block)
    @global = options[:global]
  end

  def generate_output(inputs, output)
    output.write "(function() {\n" unless @global

    output.write File.read(LOADER)

    inputs.each do |input|
      output.write input.read
    end

    output.write "\n})();\n" unless @global
  end

  def additional_dependencies(input)
    [ LOADER ]
  end
end

class HandlebarsPrecompiler < Rake::Pipeline::Filter
  class << self
    def context

      unless @context

        contents = <<END

#{File.read("./app/submodules/ember.js/packages/handlebars/lib/main.js")}
#{File.read("./app/vendor/precompile/ember-runtime.js")}
#{File.read("./app/submodules/ember.js/packages/ember-handlebars-compiler/lib/main.js")}
function precompileEmberHandlebars(string) {
  return Ember.Handlebars.precompile(string).toString();
}
END

        @context = ExecJS.compile(contents)

      end
      @context
    end

  end

  def precompile_templates(name, data)
   "\nEmber.TEMPLATES['#{name}'] = Ember.Handlebars.template(#{self.class.context.call("precompileEmberHandlebars", data)});\n"
  end

  def generate_output(inputs, output)

    inputs.each do |input|

      name = File.basename(input.path, '.handlebars')
      data = File.read(input.fullpath)
      result = precompile_templates(name, data)
      output.write result

    end
  end
end


class InternalHandlebarsPrecompiler < Rake::Pipeline::Filter
  class << self
    def context

      unless @context

        contents = <<END

#{File.read("./app/submodules/ember.js/packages/handlebars/lib/main.js")}
#{File.read("./app/vendor/precompile/ember-runtime.js")}
#{File.read("./app/submodules/ember.js/packages/ember-handlebars-compiler/lib/main.js")}
function precompileEmberHandlebars(string) {
  return Ember.Handlebars.precompile(string).toString();
}
END

        @context = ExecJS.compile(contents)

      end
      @context
    end

  end

  def precompile_templates(data)
    # Precompile defaultTemplates
   data.gsub!(%r{(defaultTemplate(?:\s*=|:)\s*)precompileTemplate\(['"](.*)['"]\)}) do
     "#{$1}Ember.Handlebars.template(#{self.class.context.call("precompileEmberHandlebars", $2)})"
   end
  end

  def generate_output(inputs, output)
    inputs.each do |input|
      result = File.read(input.fullpath)
      precompile_templates(result)
      output.write result
    end
  end
end



class CompileHandlebarsFilter < Rake::Pipeline::Filter

  def generate_output(inputs, output)
    inputs.each do |input|

      name = File.basename(input.path, '.handlebars')
      output.write "Ember.TEMPLATES['#{name}'] =  Ember.Handlebars.compile(#{input.read.to_json});\n"

    end
  end
end


class CustomLessFilter < Rake::Pipeline::Web::Filters::LessFilter

	def initialize(options={}, context = nil, &block)
		super(options, context, &block)
		@options = { :paths => ['./app/submodules/yoin-views-ipad/less/import', 
                            './app/submodules/yoin-views/less/import', 
                            './app/submodules/yoin-views/less/import2'] }
	end

end


class EmberProductionFilter < Rake::Pipeline::Filter
  def generate_output(inputs, output)
    inputs.each do |input|
      result = File.read(input.fullpath)
      result.gsub!(%r{^(\s)+ember_(assert|deprecate|warn)\((.*)\).*$}, "")
      output.write result
    end
  end
end

# you must restart the server?
files = Dir.glob('app/submodules/yoin-views/assets/*')
FileUtils.mkdir 'source/assets' unless Dir.exists? 'source/assets'
FileUtils.cp_r files, 'source/assets'

files = Dir.glob('app/submodules/yoin-views/assets_fx/*')
FileUtils.mkdir 'source/assets_fx' unless Dir.exists? 'source/assets_fx'
FileUtils.cp_r files, 'source/assets_fx'

files2 = Dir.glob('app/submodules/yoin-views-ipad/assets2/*')
FileUtils.mkdir 'source/assets2' unless Dir.exists? 'source/assets2'
FileUtils.cp_r files2, 'source/assets2'
puts 'moved images to the correct folder'


output "source"


input "."  do


	match "app/submodules/yoin-views-ipad/less/views/**/*.less" do
		filter CustomLessFilter 
		filter ConcatFilter, "projecttmp.css"
	end

	match "app/submodules/yoin-views/less/views/**/*.less" do
		filter CustomLessFilter 
		filter ConcatFilter, "projecttmp.css"
	end

  media_query = "tablet"

	match "app/submodules/yoin-views/less/query/#{media_query}/**/*.less" do
		filter CustomLessFilter 
		filter ConcatFilter, "projecttmp.css"
	end

	match "app/submodules/yoin-views/reset/normalize.css" do
		filter ConcatFilter, "projecttmp.css"
	end

end

input "app"  do


	match "submodules/yoin-views-ipad/templates/**/*.handlebars" do
		filter HandlebarsPrecompiler
		filter ConcatFilter, "apptmp.js"
    filter AddMicroLoader, :global => true
	end



	match "submodules/yoin-views/templates/**/*.handlebars" do
		filter HandlebarsPrecompiler
		filter ConcatFilter, "apptmp.js"
    filter AddMicroLoader, :global => true
	end

	match "vendor/precompile/ember-handlebars-require.js" do
		filter ConcatFilter, "apptmp.js"
  end

	match "app/lib/**/*.js" do
		minispade :rewrite_requires => true, :string=> false, :module_id_generator => proc { |input|
			id = input.path.dup
			id.sub!('/lib/', '/')
			id.sub!(/\.js$/, '')
			id.sub!(/\/main$/, '')
			id
		}

		concat "apptmp.js"
    filter AddMicroLoader, :global => true
	end


	match "submodules/{yoin-ember}/fixtures/**/*.js" do
		minispade :rewrite_requires => true, :string=> false, :module_id_generator => proc { |input|
			id = input.path.dup
			id.sub!('submodules/', '')
			id.sub!(/\.js$/, '')
			id
		}

	 concat "apptmp.js"
   filter AddMicroLoader, :global => true
	end


	match "submodules/{yoin-ember,yoin-views,yoin-views-ipad}/lib/**/*.js" do
		minispade :rewrite_requires => true, :string=> false, :module_id_generator => proc { |input|
			id = input.path.dup
			id.sub!('submodules/', '')
			id.sub!('/lib/', '/')
			id.sub!(/\.js$/, '')
			id.sub!(/\/main$/, '')
			id
		}

	 concat "apptmp.js"
    filter AddMicroLoader, :global => true
	end


	match "submodules/*/packages/{ember-data,ember-application,ember-routing,ember-debug,ember-metal,ember-runtime,ember-states,ember-views,rsvp,container,metamorph,ember-handlebars,ember-handlebars-compiler,ember-touch}/lib/**/.js" do
		minispade :rewrite_requires => true, :string=> false, :module_id_generator => proc { |input|
			id = input.path.dup
			id.sub!('submodules/', '')
			id.sub!(/[a-z\-\.]+\//, '')
			id.sub!('packages/', '')
			id.sub!('/lib/', '/')
			id.sub!(/\.js$/, '')
			id.sub!(/\/main$/, '')
			id
		}

	 concat "apptmp.js"
   filter InternalHandlebarsPrecompiler
   filter AddMicroLoader, :global => true
	end





	match "vendor/minispade.js" do
		filter ConcatFilter, "apptmp.js"
	end

	match "vendor/qrcode.js" do
		filter ConcatFilter, "apptmp.js"
	end

	match "vendor/moment.js" do
		filter ConcatFilter, "apptmp.js"
	end

	match "vendor/infobubble.js" do
		filter ConcatFilter, "apptmp.js"
	end

	match "vendor/jquery.ui.map.min.js.js" do
		filter ConcatFilter, "apptmp.js"
	end

	match "vendor/jquery-1.7.2.js" do
		filter ConcatFilter, "apptmp.js"
	end

	match "vendor/handlebars.runtime-1.0.rc.2.js" do
		filter ConcatFilter, "apptmp.js"
	end

	#match "vendor/facebook_js_sdk.js" do
	#	filter ConcatFilter, "apptmp.js"
	#end

	match "vendor/i18n.js" do
		filter ConcatFilter, "apptmp.js"
	end

end

## check YOIN_PROD to minify output to production development
input "source"  do

	match "apptmp.js" do

    if ( !ENV['YOIN_PROD'].nil? && !ENV['YOIN_PROD'].empty? )
      filter EmberProductionFilter
      uglify( {:copyright => false} )
    end

		filter ConcatFilter, "app.js"

	end

	match "projecttmp.css" do

    if ( !ENV['YOIN_PROD'].nil? && !ENV['YOIN_PROD'].empty? )
      yui_css 
    end
		filter ConcatFilter, "project.css"

	end

end
# vim: filetype=ruby
